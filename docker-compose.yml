services:
  gateway:
    build: ./gateway
    ports:
      - "4000:4000"
    depends_on:
      - word-check
      - synonym
      - category
      - report
      - sentiment
    environment:
      - PORT=4000
    restart: on-failure

  word-check:
    build: ./word-check-svc
    ports:
      - "4001:4001"
    environment:
      - DB_HOST=word-check-db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=wordcheck
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=4001
    depends_on:
      word-check-db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/graphql"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  word-check-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: wordcheck
    volumes:
      - word-check-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "wordcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  synonym:
    build: ./synonym-svc
    ports:
      - "4002:4002"
    environment:
      - DB_HOST=synonym-db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=synonym
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=4002
    depends_on:
      synonym-db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/graphql"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  synonym-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: synonym
    volumes:
      - synonym-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "synonym"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  category:
    build: ./category-svc
    ports:
      - "4003:4003"
    environment:
      - DB_HOST=category-db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=category
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=4003
    depends_on:
      category-db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/graphql"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  category-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: category
    volumes:
      - category-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "category"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  report:
    build: ./report-svc
    ports:
      - "4004:4004"
    environment:
      - DB_HOST=report-db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=report
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=4004
    depends_on:
      report-db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/graphql"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  report-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: report
    volumes:
      - report-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "report"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  gemini-proxy:
    build: ./gemini-proxy
    ports:
      - "4005:4005"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=4005

  sentiment:
    build: ./sentiment-svc
    ports:
      - "4006:4006"
    environment:
      - DB_HOST=sentiment-db
      - DB_USER=user
      - DB_PASSWORD=pass
      - DB_NAME=sentiment
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PORT=4006
    depends_on:
      sentiment-db:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/graphql"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

  sentiment-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: sentiment
    volumes:
      - sentiment-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user", "-d", "sentiment"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  word-check-data:
  synonym-data:
  category-data:
  report-data:
  sentiment-data:
